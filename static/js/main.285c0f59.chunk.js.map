{"version":3,"sources":["assets/gameLoop.png","assets/server.png","assets/sendState.png","assets/clientServer.png","assets/webrtcClient.png","components.jsx","presentation.jsx","index.jsx"],"names":["module","exports","__webpack_require__","p","Appear","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","appear","props","children","React","Component","Deck","_React$Component2","deck","Heading","_React$Component3","heading","assign","size","margin","textColor","List","_React$Component5","list","Slide","_React$Component6","slide","style","height","Text","_React$Component7","components_text","textAlign","Image","_React$Component8","components_image","CodeSnippet","_React$Component9","fontFamily","color","AppearText","_React$Component11","components_Appear","components_Text","AppearImage","_React$Component12","components_Image","require","theme","createTheme","primary","secondary","tertiary","quaternary","fifth","images","gameLoop","server","sendState","clientServer","webrtcClient","Presentation","components_Deck","transition","components_Slide","components_Heading","components_AppearText","width","src","components_CodeSnippet","components_AppearImage","ReactDOM","render","react_hot_loader","errorReporter","_ref","error","lib_default","presentation_Presentation","document","getElementById"],"mappings":"mHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4PCgB3BC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAoBZ,KAAKa,MACvBb,KAAKa,MAAMC,cAJpBlB,EAAA,CAA4BmB,IAAMC,WAUrBC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAnB,OAAAC,EAAA,EAAAD,CAAAE,KAAAiB,GAAAnB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmB,GAAAd,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAmB,EAAAC,GAAApB,OAAAQ,EAAA,EAAAR,CAAAmB,EAAA,EAAAV,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACQ,EAAA,EAAkBnB,KAAKa,MACrBb,KAAKa,MAAMC,cAJpBG,EAAA,CAA0BF,IAAMC,WAUnBI,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAtB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,GAAAtB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAjB,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAsB,EAAAC,GAAAvB,OAAAQ,EAAA,EAAAR,CAAAsB,EAAA,EAAAb,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACW,EAAA,EAADxB,OAAAyB,OAAA,CAAkBC,KAAM,EAAGC,OA1BZ,KA0BkCC,UAAU,YAAe1B,KAAKa,OAC5Eb,KAAKa,MAAMC,cAJpBM,EAAA,CAA6BL,IAAMC,WAoBtBW,GAViBZ,IAAMC,UAUpC,SAAAY,GAAA,SAAAD,IAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,GAAA7B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA6B,EAAAC,GAAA9B,OAAAQ,EAAA,EAAAR,CAAA6B,EAAA,EAAApB,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACkB,EAAA,EAAD/B,OAAAyB,OAAA,CAAeE,OA9CA,MA8C0BzB,KAAKa,OAC3Cb,KAAKa,MAAMC,cAJpBa,EAAA,CAA0BZ,IAAMC,YAUnBc,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAhC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,GAAAhC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAgC,EAAAC,GAAAjC,OAAAQ,EAAA,EAAAR,CAAAgC,EAAA,EAAAvB,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACqB,EAAA,EAADlC,OAAAyB,OAAA,CAAgBU,MAAO,CAACC,OAAQ,SAAalC,KAAKa,OAC/Cb,KAAKa,MAAMC,cAJpBgB,EAAA,CAA2Bf,IAAMC,WAUpBmB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAArC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,GAAArC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAqC,EAAAC,GAAAtC,OAAAQ,EAAA,EAAAR,CAAAqC,EAAA,EAAA5B,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAAC0B,EAAA,EAADvC,OAAAyB,OAAA,CAAeE,OAlEA,KAkEsBC,UAAU,aAAaY,UAAU,QAAWtC,KAAKa,OACnFb,KAAKa,MAAMC,cAJpBqB,EAAA,CAA0BpB,IAAMC,WAUnBuB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAzC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,GAAAzC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAyC,EAAAC,GAAA1C,OAAAQ,EAAA,EAAAR,CAAAyC,EAAA,EAAAhC,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAAC8B,EAAA,EAAmBzC,KAAKa,MACtBb,KAAKa,MAAMC,cAJpByB,EAAA,CAA2BxB,IAAMC,WAYpB0B,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA5C,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GAAA5C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA4C,EAAAC,GAAA7C,OAAAQ,EAAA,EAAAR,CAAA4C,EAAA,EAAAnC,IAAA,SAAAC,MAAA,WAEI,OAAOC,EAAAC,EAAAC,cAAA,QAAMsB,MAAO,CAACW,WAAY,YAAaC,MAAO,YAAa7C,KAAKa,MAAMC,cAFjF4B,EAAA,CAAiC3B,IAAMC,WA4B1B8B,GAtBmB/B,IAAMC,UAsBtC,SAAA+B,GAAA,SAAAD,IAAA,OAAAhD,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,GAAAhD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAgD,EAAAC,GAAAjD,OAAAQ,EAAA,EAAAR,CAAAgD,EAAA,EAAAvC,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACqC,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAADnD,OAAAyB,OAAA,CAAME,OArHO,MAqHmBzB,KAAKa,MAArC,CAA4CyB,UAAU,SACnDtC,KAAKa,MAAMC,eALtBgC,EAAA,CAAgC/B,IAAMC,YAYzBkC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAApD,OAAAC,EAAA,EAAAD,CAAAE,KAAAkD,GAAApD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoD,GAAA/C,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAoD,EAAAC,GAAArD,OAAAQ,EAAA,EAAAR,CAAAoD,EAAA,EAAA3C,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACqC,EAAD,KACEvC,EAAAC,EAAAC,cAACyC,EAAUpD,KAAKa,MACbb,KAAKa,MAAMC,eALtBoC,EAAA,CAAiCnC,IAAMC,6BCrHvCqC,EAAQ,KAER,IAAMC,EAAQC,IACZ,CACEC,QAAS,UACTC,UAAW,UACXC,SAAU,UACVC,WAAY,UACZC,MAAO,WAET,CACEJ,QAAS,aACTC,UAAW,aAEb,CACEhC,OAAQ,OAINoC,EAAS,CACbC,SAAUT,EAAQ,KAClBU,OAAQV,EAAQ,KAChBW,UAAWX,EAAQ,KACnBY,aAAcZ,EAAQ,KACtBa,aAAcb,EAAQ,MAGHc,mLAEjB,OACE1D,EAAAC,EAAAC,cAACyD,EAAD,CACEC,WAAY,GACZf,MAAOA,GACP7C,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,kDAIF9D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,wBAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,MAEA/D,EAAAC,EAAAC,cAAC6D,EAAD,+DAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,yEAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,4EAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,mBAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAACsC,EAAD,kEAIFxC,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,+BAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,qDAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,uCAGA9D,EAAAC,EAAAC,cAACyC,EAAD,CAAOqB,MAAM,MAAMC,IAAKb,EAAOC,WAC/BrD,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAACgE,EAAD,wBADF,iCAGAlE,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAACgE,EAAD,iBADF,6BAGAlE,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAACgE,EAAD,eADF,qBAGAlE,EAAAC,EAAAC,cAAC6D,EAAD,8DAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,+BAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,0DAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,6EAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAAA,qCAEFF,EAAAC,EAAAC,cAAC6D,EAAD,+CAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,6BAGA9D,EAAAC,EAAAC,cAACiE,EAAD,CAAaF,IAAKb,EAAOE,OAAQU,MAAM,SAEzChE,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,sBACgB9D,EAAAC,EAAAC,cAACgE,EAAD,8BAEhBlE,EAAAC,EAAAC,cAACiE,EAAD,CAAaF,IAAKb,EAAOG,UAAWS,MAAM,QAC1ChE,EAAAC,EAAAC,cAAC6D,EAAD,+DAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,uCAGA9D,EAAAC,EAAAC,cAACiE,EAAD,CAAaF,IAAKb,EAAOI,aAAcQ,MAAM,SAE/ChE,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,wCAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,4DAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAAA,mCAEFF,EAAAC,EAAAC,cAAC6D,EAAD,qGAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAACsC,EAAD,gFACAxC,EAAAC,EAAAC,cAAC6D,EAAD,+BACA/D,EAAAC,EAAAC,cAAC6D,EAAD,yBACA/D,EAAAC,EAAAC,cAAC6D,EAAD,8BACA/D,EAAAC,EAAAC,cAAC6D,EAAD,oFACA/D,EAAAC,EAAAC,cAAC6D,EAAD,sEAEF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,yCAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,gEACA/D,EAAAC,EAAAC,cAAC6D,EAAD,0DACA/D,EAAAC,EAAAC,cAAC6D,EAAD,8DACA/D,EAAAC,EAAAC,cAAC6D,EAAD,4CACA/D,EAAAC,EAAAC,cAAC6D,EAAD,sDAEF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,8BAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,8CAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,yFAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,oFAC8E/D,EAAAC,EAAAC,cAAA,kBAD9E,KAGAF,EAAAC,EAAAC,cAAC6D,EAAD,yGAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,8BAGA9D,EAAAC,EAAAC,cAACsC,EAAD,4CAGAxC,EAAAC,EAAAC,cAAC6D,EAAD,wCAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,oDAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,uEAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,8BAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,iGAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,8CAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,qDAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,oEAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,2EAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,6EAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAACsC,EAAD,gEAIFxC,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,+CAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,yBACmB/D,EAAAC,EAAAC,cAAA,wCAEnBF,EAAAC,EAAAC,cAAC6D,EAAD,yEAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,kDAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,oBAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,sDAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,6EAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,0FAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,+CAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,sGAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,uEAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,oDAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,iDAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,cAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,6DACuD/D,EAAAC,EAAAC,cAAA,mBAEvDF,EAAAC,EAAAC,cAAC6D,EAAD,4CAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,mBACa/D,EAAAC,EAAAC,cAACgE,EAAD,oBADb,QACwDlE,EAAAC,EAAAC,cAACgE,EAAD,yBAExDlE,EAAAC,EAAAC,cAAC6D,EAAD,wBAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,uCAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAAA,iBAEFF,EAAAC,EAAAC,cAAC6D,EAAD,0DAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,6DAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,4BAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,8BACwB/D,EAAAC,EAAAC,cAACgE,EAAD,oBADxB,eAC0ElE,EAAAC,EAAAC,cAACgE,EAAD,0BAD1E,UAGAlE,EAAAC,EAAAC,cAAC6D,EAAD,6DAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,kCAGA9D,EAAAC,EAAAC,cAACiE,EAAD,CAAaF,IAAKb,EAAOK,gBAE3BzD,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,oBAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,iHAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,kFAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,kGAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,8BAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,gFAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,0BAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,yCAGA9D,EAAAC,EAAAC,cAACiE,EAAD,CAAaF,IAAKb,EAAOK,gBAE3BzD,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAACsC,EAAD,4DAGAxC,EAAAC,EAAAC,cAAC6D,EAAD,yFAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,0FAIF/D,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAC4D,EAAD,wBAGA9D,EAAAC,EAAAC,cAAC6D,EAAD,6FAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,8GAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,kBAGA/D,EAAAC,EAAAC,cAAC6D,EAAD,sCAjVgCzD,IAAMC,WClChD6D,IAASC,OACPrE,EAAAC,EAAAC,cAACoE,EAAA,aAAD,CAAcC,cAPY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAAezE,EAAAC,EAAAC,cAACwE,EAAAzE,EAAD,CAAQwE,MAAOA,MAQtDzE,EAAAC,EAAAC,cAACyE,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.285c0f59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gameLoop.fccddc68.png\";","module.exports = __webpack_public_path__ + \"static/media/server.22ce31b1.png\";","module.exports = __webpack_public_path__ + \"static/media/sendState.510e8244.png\";","module.exports = __webpack_public_path__ + \"static/media/clientServer.6e85baa7.png\";","module.exports = __webpack_public_path__ + \"static/media/webrtcClient.f5b35b80.png\";","import React from \"react\";\n\nimport {\n  Appear as SpectacleAppear,\n  Deck as SpectacleDeck,\n  Heading as SpectacleHeading,\n  ListItem as SpectacleListItem,\n  List as SpectacleList,\n  Slide as SpectacleSlide,\n  Text as SpectalceText,\n  Image as SpectacleImage,\n} from 'spectacle';\n\nconst normalMargin = '25';\n\n// Rexported with defaults\nexport class Appear extends React.Component {\n  render() {\n    return (\n      <SpectacleAppear {...this.props}>\n        {this.props.children}\n      </SpectacleAppear>\n    );\n  }\n}\n\nexport class Deck extends React.Component {\n  render() {\n    return (\n      <SpectacleDeck {...this.props}>\n        {this.props.children}\n      </SpectacleDeck>\n    );\n  }\n}\n\nexport class Heading extends React.Component {\n  render() {\n    return (\n      <SpectacleHeading size={5} margin={normalMargin} textColor='tertiary' {...this.props}>\n        {this.props.children}\n      </SpectacleHeading>\n    );\n  }\n}\n\nexport class ListItem extends React.Component {\n  render() {\n    return (\n      <SpectacleListItem margin={normalMargin} textColor='quaternary' {...this.props}>\n        {this.props.children}\n      </SpectacleListItem>\n    );\n  }\n}\n\nexport class List extends React.Component {\n  render() {\n    return (\n      <SpectacleList margin={normalMargin} {...this.props}>\n        {this.props.children}\n      </SpectacleList>\n    );\n  }\n}\n\nexport class Slide extends React.Component {\n  render() {\n    return (\n      <SpectacleSlide style={{height: '100%'}} {...this.props}>\n        {this.props.children}\n      </SpectacleSlide>\n    );\n  }\n}\n\nexport class Text extends React.Component {\n  render() {\n    return (\n      <SpectalceText margin={normalMargin} textColor=\"quaternary\" textAlign=\"left\" {...this.props}>\n        {this.props.children}\n      </SpectalceText>\n    );\n  }\n}\n\nexport class Image extends React.Component {\n  render() {\n    return (\n      <SpectacleImage {...this.props}>\n        {this.props.children}\n      </SpectacleImage>\n    );\n  }\n}\n\n// New components.\n\nexport class CodeSnippet extends React.Component {\n  render() {\n    return <span style={{fontFamily: 'monospace', color: '#ee8613'}}>{this.props.children}</span>;\n  }\n}\n\nexport class AppearList extends React.Component {\n  render() {\n    let children;\n    if (this.props.children.map === undefined) {\n      children = [this.props.children];\n    } else {\n      children = this.props.children;\n    }\n    return (\n      <List {...this.props}>\n        {children.map((e, i) => {\n          return (\n            <Appear key={i}>\n              {e}\n            </Appear>\n          );\n        })}\n      </List>\n    );\n  }\n}\n\nexport class AppearText extends React.Component {\n  render() {\n    return (\n      <Appear>\n        <Text margin={normalMargin} {...this.props} textAlign=\"left\">\n          {this.props.children}\n        </Text>\n      </Appear>\n    );\n  }\n}\n\nexport class AppearImage extends React.Component {\n  render() {\n    return (\n      <Appear>\n        <Image {...this.props}>\n          {this.props.children}\n        </Image>\n      </Appear>\n    );\n  }\n}\n","/* eslint-disable import/no-webpack-loader-syntax */\n\n// Import React\nimport React from 'react';\n\n// Import Spectacle Core tags\nimport {\n  Deck,\n  Heading,\n  Slide,\n  Text,\n  CodeSnippet,\n  Image,\n  AppearImage,\n  AppearText,\n} from './components';\n\n// Import theme\nimport createTheme from 'spectacle/lib/themes/default';\n\n// Require CSS\nrequire('normalize.css');\n\nconst theme = createTheme(\n  {\n    primary: '#131226',\n    secondary: '#F2E30C',\n    tertiary: '#F2A30F',\n    quaternary: '#F27B13',\n    fifth: '#F24B0F',\n  },\n  {\n    primary: 'Montserrat',\n    secondary: 'Helvetica',\n  },\n  {\n    margin: '10',\n  },\n);\n\nconst images = {\n  gameLoop: require('./assets/gameLoop.png'),\n  server: require('./assets/server.png'),\n  sendState: require('./assets/sendState.png'),\n  clientServer: require('./assets/clientServer.png'),\n  webrtcClient: require('./assets/webrtcClient.png'),\n};\n\nexport default class Presentation extends React.Component {\n  render() {\n    return (\n      <Deck\n        transition={[]}\n        theme={theme}>\n        <Slide>\n          <Heading>\n            Real Time Multiplayer Web Games & WebRTC\n          </Heading>\n        </Slide>\n        <Slide>\n          <Heading>\n            Why this topic?\n          </Heading>\n          <AppearText>\n          </AppearText>\n          <AppearText>\n            I think this stuff is super cool and want to share it!\n          </AppearText>\n          <AppearText>\n            I've learned it along the way of making some web games of my own\n          </AppearText>\n          <AppearText>\n            Gaming has many extremely difficult and unique engineering problems\n          </AppearText>\n          <AppearText>\n            It's fun!\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Text>\n            Let's start by going over multiplayer game architectures\n          </Text>\n        </Slide>\n        <Slide>\n          <Heading>\n            What goes into a game?\n          </Heading>\n          <AppearText>\n            Let's start with a simple singleplayer game\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            Minimal singleplayer game loop\n          </Heading>\n          <Image width=\"50%\" src={images.gameLoop}/>\n          <AppearText>\n            <CodeSnippet>processInputs()</CodeSnippet> reads client keyboard inputs\n          </AppearText>\n          <AppearText>\n            <CodeSnippet>update()</CodeSnippet> processes the game logic\n          </AppearText>\n          <AppearText>\n            <CodeSnippet>draw()</CodeSnippet> renders the game\n          </AppearText>\n          <AppearText>\n            Run it 60 times a second and we've got a game going!\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            Now to add multiplayer\n          </Heading>\n          <AppearText>\n            We'll go with a normal client-server architecture\n          </AppearText>\n          <AppearText>\n            Always remember the most important rule for secure multiplayer games\n          </AppearText>\n          <AppearText>\n            <b>Never trust the client!</b>\n          </AppearText>\n          <AppearText>\n            We'll need an \"authoritative server\"\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            Authoritative server\n          </Heading>\n          <AppearImage src={images.server} width=\"50%\"/>\n        </Slide>\n        <Slide>\n          <Heading>\n            Let's look at <CodeSnippet>sendStateToClients()</CodeSnippet>\n          </Heading>\n          <AppearImage src={images.sendState} width=\"50%\"/>\n          <AppearText>\n            We tell each client its entity id, and the game state\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            What about on the client side?\n          </Heading>\n          <AppearImage src={images.clientServer} width=\"50%\"/>\n        </Slide>\n        <Slide>\n          <Heading>\n            So far, simple, but many issues\n          </Heading>\n          <AppearText>\n            Any updates require a full round-trip to the server\n          </AppearText>\n          <AppearText>\n            <b>That means input lag!</b>\n          </AppearText>\n          <AppearText>\n            From another continent, you press a button, and might wait half a second for it to register\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Text>For input lag, solutions must be customized to the game - mix together:</Text>\n          <AppearText>Client-side prediction</AppearText>\n          <AppearText>Lag compensation</AppearText>\n          <AppearText>Server reconciliation</AppearText>\n          <AppearText>We won't go into detail on these further, but they're all quite interesting</AppearText>\n          <AppearText>These solutions are key to a smooth-feeling, fast-paced game</AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            However - not perfect solutions!\n          </Heading>\n          <AppearText>They're tricks that try to hide the lag from the player</AppearText>\n          <AppearText>If lag is bad enough, it will still feel terrible</AppearText>\n          <AppearText>How can we make that bad lag less likely for players?</AppearText>\n          <AppearText>Almost ready to introduce WebRTC...</AppearText>\n          <AppearText>But first, a look into TCP vs UDP for gaming</AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            TCP vs UDP for gaming\n          </Heading>\n          <AppearText>\n            TCP: Reliable, ordered message stream\n          </AppearText>\n          <AppearText>\n            Dropped packets are retried; newer packets are delayed until old ones go through\n          </AppearText>\n          <AppearText>\n            This is great for many things on the web, but retrying & delaying makes lag <b>worse</b>!\n          </AppearText>\n          <AppearText>\n            Playing on a poor WiFi connnection will feel awful because of dropped packets delaying new data\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            TCP vs UDP for gaming\n          </Heading>\n          <Text>\n            UDP: Unreliable, unordered messages\n          </Text>\n          <AppearText>\n            Dropped packets are not retried\n          </AppearText>\n          <AppearText>\n            New messages may arrive before old messages\n          </AppearText>\n          <AppearText>\n            All the reliability of TCP is gone - but so are the slowdowns\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            TCP vs UDP for gaming\n          </Heading>\n          <AppearText>\n            Due to TCP's non time-critical nature, UDP is preferred for fast paced multiplayer games\n          </AppearText>\n          <AppearText>\n            Still need to ensure data is not lost\n          </AppearText>\n          <AppearText>\n            Message reliability needs to be built ad-hoc\n          </AppearText>\n          <AppearText>\n            Clients and servers exchange acknowleded recent message ids\n          </AppearText>\n          <AppearText>\n            Messages unacknowleded within certain time are resent if necessary\n          </AppearText>\n          <AppearText>\n            Client continues to get other data when there was a dropped packet!\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Text>\n            Using UDP = much more consistent networking experience\n          </Text>\n        </Slide>\n        <Slide>\n          <Heading>\n            Problem solved? Not for browser games!\n          </Heading>\n          <AppearText>\n            Unfortunately... <i>browsers just can't do UDP</i>\n          </AppearText>\n          <AppearText>\n            Browsers were built on top of HTTP, which needs reliable streams\n          </AppearText>\n          <AppearText>\n            Is all hope for real-time web games lost?\n          </AppearText>\n          <AppearText>\n            Not yet...\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            In comes WebRTC (Web Real-Time Communication)\n          </Heading>\n          <AppearText>\n            Supports streaming audio and video & direct peer-to-peer connections\n          </AppearText>\n          <AppearText>\n            Replacement for the plugins and custom native apps (remember Flash? Silverlight?)\n          </AppearText>\n          <AppearText>\n            Widely supported in all major browsers\n          </AppearText>\n          <AppearText>\n            Spec is very complicated - client-server game with a data stream is not the intended use case\n          </AppearText>\n          <AppearText>\n            A less known feature of WebRTC: Arbitrary binary data channels\n          </AppearText>\n          <AppearText>\n            That sounds perfect - let's try to use it!\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            Will this work? Does WebRTC support UDP?\n          </Heading>\n          <AppearText>\n            No...\n          </AppearText>\n          <AppearText>\n            but it uses something we can make work just like it: <b>STCP!</b>\n          </AppearText>\n          <AppearText>\n            STCP (Scalable TCP) is configurable\n          </AppearText>\n          <AppearText>\n            We can set <CodeSnippet>retries = 0</CodeSnippet> and <CodeSnippet>ordered = false</CodeSnippet>\n          </AppearText>\n          <AppearText>\n            Just like UDP!\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            But, isn't WebRTC hard to use?\n          </Heading>\n          <AppearText>\n            <b>Yes</b>\n          </AppearText>\n          <AppearText>\n            Much harder to get up and running than websockets\n          </AppearText>\n          <AppearText>\n            Browser debug tools are awful compared to websockets\n          </AppearText>\n          <AppearText>\n            But it can be done!\n          </AppearText>\n          <AppearText>\n            Libraries like Node's <CodeSnippet>node-webrtc</CodeSnippet> and Rust's <CodeSnippet>webrtc-unreliable</CodeSnippet> exist\n          </AppearText>\n          <AppearText>\n            Server acts like a peer that the clients connect to\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            WebRTC code on the client\n          </Heading>\n          <AppearImage src={images.webrtcClient}/>\n        </Slide>\n        <Slide>\n          <Heading>\n            STUN? ICE?!\n          </Heading>\n          <AppearText>\n            STUN (Session Traversal Utilities for NAT) is a server that helps establish the connection with the peer\n          </AppearText>\n          <AppearText>\n            You can use a public STUN server, or run your own lightweight STUN server\n          </AppearText>\n          <AppearText>\n            ICE (Interactive Connectivity Establishment) is the protocol to establish the connection\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            So what was all that?\n          </Heading>\n          <AppearText>\n            We use a normal HTTP endpoint to expose the server as the ICE candidate\n          </AppearText>\n          <AppearText>\n            Let's look again\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            WebRTC code on the client, again\n          </Heading>\n          <AppearImage src={images.webrtcClient}/>\n        </Slide>\n        <Slide>\n          <Text>\n            On the server, those libraries do the heavy lifting\n          </Text>\n          <AppearText>\n            They implement the minimal WebRTC spec for unreliable data streams from a server\n          </AppearText>\n          <AppearText>\n            Using them, we can then write our code almost as easily as if using a websocket!\n          </AppearText>\n        </Slide>\n        <Slide>\n          <Heading>\n            And we're done!\n          </Heading>\n          <AppearText>\n            That's the basics of WebRTC, and how it may be the future of real-time browser games\n          </AppearText>\n          <AppearText>\n            WebRTC is pretty new still (version 1.0 released 2 years ago), so most web games are not using it yet\n          </AppearText>\n          <AppearText>\n            But soon!\n          </AppearText>\n          <AppearText>\n            Thanks for listening\n          </AppearText>\n        </Slide>\n      </Deck>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport Redbox from 'redbox-react';\n\nimport Presentation from './presentation';\n\nconst CustomErrorReporter = ({ error }) => <Redbox error={error} />;\n\nCustomErrorReporter.propTypes = {\n  error: PropTypes.instanceOf(Error).isRequired,\n};\n\nReactDOM.render(\n  <AppContainer errorReporter={CustomErrorReporter}>\n    <Presentation />\n  </AppContainer>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept('./presentation', () => {\n    const NextPresentation = require('./presentation').default;\n    ReactDOM.render(\n      <AppContainer errorReporter={CustomErrorReporter}>\n        <NextPresentation />\n      </AppContainer>,\n      document.getElementById('root')\n    );\n  });\n}\n"],"sourceRoot":""}